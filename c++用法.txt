cin>>(输入内容)>>（输入内容）
cout<<(输入内容)<<（输入内容）
这两个速度慢，超时换格式化输入
注 endl为换行符；


（spacename）::(函数)引用某个命名空间的函数定义
引用头文件不需要.h
前面加c
bool量，0是false，非0是ture
表达为false是0，ture是1；


字符串不需要定义数组
直接定义为string类型的变量即可
eg： string a ="hello cpp";
    string b ="!"
字符串拼接：
string c= a+b;
c就变成了hello cpp！
字符串输入
①使用cin，只能检测第一个空格前的字符串
②使用getline，可以获取一行所有的字符串，回车时结束
字符串长度检测
（字符串名称）.length()
这个函数的返回值就是字符串长度
（字符串名称）.substr（从第几个开始，向后取几个）
这个函数是取字符串中的字符

结构体定义后调用时不需要加struct
直接定义
eg：
struct noob {
    int a;
    int b;
}

noob a//直接定义一个noob类型的结构变量


在c++中想在函数中对本地变量做处理，可以这样写

int 函数（int &a）
{


}
这个时候函数可以直接访问到本地变量a
而不需要再创建一个指针指向a

c++工具，stl标准库
六大容器：
vector（可变数组）
set
map
stack
queue

1：vector
使用时要引用头文件#include <vector>

三种定义可变数组的方式：
①：
vector <数组变量类型> 数组名；
eg：vector <int> a;
默认数组大小为0
数组名.resize(大小)//定义数组大小
之后就能正常使用，已经初始化为0
②：
vector <数组变量类型> 数组名(分配的空间大小，每个单元初始化的值)
eg：vector <int> a（10,2)
分配了10个空间，所有单元初始化为2；
③
vector <数组变量类型> 数组名(分配的空间大小）
每个单元初始化为0

额外指令：
一：末尾新增数据
数组名.push_back(要加入的数据)//在数组后面再加一个单元
eg：v.push_back(10) ;在v数组后面加一个数值为10的单元

二：迭代器
for(auto p=数组名.begin();p!=数组名.end();p++){
    对数组每一个单元的处理代码
    注意：p是指向数组单元的指针
    通过访问这个指针可以对每一个单元进行操作
}
效果等价于数组遍历，自动遍历,只能用来遍历可变数组

2：set(集合)
使用时要引用头文件<set>
定义：
set <集合内类型> 集合名称;
注意：集合元素互异并且从小到大排序

插入：
集合名.inset(集合元素编号)；
可以使用迭代器遍历
for(auto p=集合名.begin();p!=集合名.end();p++){
}

查找：
集合名.find(要寻找的元素数据)
他返回的是指针，找到就指向那个元素，没找到就指向最后一个元素
用法：cout<<(集合名.find(要寻找的元素数据)！=集合名.end())<<endl
s.end指向集合最后一位元素的下一个储存空间（没有任何元素）
输出布尔量，1意味着找到了（地址不等于end）0则反之

删除：
数组名.erase(要删除的元素)

3：map（键值对）
需要引用头文件<map>

定义：
map <键的数据类型,值的数据类型> 名称;
eg：map <string,int> a;键值对按照y键的大小进行排序（

添加：
a[键] = 值;
eg：a["hello"]=1;

输出：
cout<<"hello:"<<a["hello"]<<endl
如果hello这个键存在则输出值，否则输出0

遍历：
使用迭代器
for(auto p=键值对名称.begin();p!=键值对名称.end();p++){
    cout<<p-><<first<<" : "<<second<<endl;
}
解释：此时p是一个结构体指针，先指向第一个成员，再指向第二个成员；
map所创建的变量实际上是一个结构体的集合
如a["hello"]=1实际上就是
struct a{
    string key;(这个是first)
    int date;（这个是second）
}
a hello ;
hello.key="hello"
hello.date=1

map的所有处理函数：
https://blog.csdn.net/weixin_37999268/article/details/124516073

sort函数
使用时要引用头文件<algorithm>
使用方法：
sort（m.begin（）,m.end())
两个参数，需要传入指针
初始位置，
结束位置（左闭右开区间）右边最后一个不会排序；

使用cmp自定义排序
先定义bool cmp（int x，int y）{

    return x>y;//当x>y则返回1（真）否则则返回0（假）

}
当cmp的返回值为1（真）时x在y前面
否则交换x与y
x与y分别是当前位置和后一位的两个数据
返回值部分不能用>=或者<=，
否则到结尾之前都是相同元素时返回结果会一直为真
（因为都相等）
会导致指针不断增加从而越界产生段错误。
使用sort的时候多加一个cmp参数即可：

count函数
包含于头文件<algorithm>（同sort）
三个参数，起始位置，终止位置，要查找的数据
返回值是一个数，表示找到元素的数量


cctype，对字符进行判断的函数，引用头文件<cctype>
判断是否是字母：isalpha(字符名称)
判断是不是小写字母：islower（字符名称）
判断是不是大写字母：issupper（字符名称）
判断是不是字母或者数字：isalnum(字符名称)
判断是不是空格或者占位符：isspace(字符名称)
将字母转化为小写字母：tolower(字符名称)
将字母转化为大写字母：tosupper(字符名称)
判断类型的返回值是bool，0为假，非0为真（不一定是1）
转化类型的返回值是转化结果

pair<数据类型，数据类型>
https://blog.csdn.net/llvyeriji/article/details/124523025

iomanip，输入输出流操作器，对cincout进行操作
https://blog.csdn.net/yes1989yes/article/details/73087758
        
ceil:取整函数
__gcd：求两数最小公约数
log（）代表ln()
log10代表log10（）

next_permutation（first,last)
进行判断，若将迭代器范围 [first, last] 的排列 排列到下一个排列（第一个是名词，第二个是动词，第三个是名词）
，其中所有排列的集合默认按照operator < 或者 字典序 或者 按照输入到第三个参数 comp 的排列方法排列。
如果存在这样的“下一个排列”，返回true并执行排列，否则返回false。

