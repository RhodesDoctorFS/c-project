主函数：
#include <stdio.h>

int main()
{



     return 0;
}
#include<bits/stdc++.h>

using namespace std;
int main()
{



     return 0;
}

输出： printf（）
输入 scanf（）


int：整数变量类型  double：双浮点 float：单浮点
只要输出结果是double即可
"%d",输出输入整数 
%o:八进制     0表示后面出现的是八进制数
              
%x：十六进制    0x表示后面出现的是十六进制数
%lf  输入双浮点
%f   输出浮点
%e 科学计数法   eg：-584e+8
                    e后面是次方数
%p输出地址（十六进制数）
%g(自动选择输出类型且不输出无意义的0)
%04d(填充4个0）

float变量后面需要f
eg：8.95f
inf无穷大（浮点数除以0）
nan不存在的数


保留几位小数点就  %.几f







a++=a
++a=a+1
（变量 运算符= 算子） = （变量 运算符 算子= 变量）
eg： (a+=7)  = (a+7=a)
前缀表示结果后缀表示初始值



if(判断条件){
     进行的运算;



}eles{
      进行的运算;


}
不带大括号只能用一句

if（0）代表不执行if后面的语句




}
比较运算的结果
算数>比较>赋值
成立为1
不成立为0


== 是否相等
！=不相等的话



switch(  变量 ){
     case 1:
          运行指令
          break;
     case 2:
          运行指令
          break;
     default:
          运行指令
}
根据变量的值转到相应的case，然后依次向下运行
直到遇到break结束运行
case后面跟变量值
default代表所有都不匹配的时候的行为


while (判段条件){
     满足时运行指令;
     满足时运行的指令2;




}\\不满足判断条件时结束循环



生成随机数： int a =rand()%100(此为生成一百以内的随机数)


ACM竞赛格式
输入格式：
while(scanf("%d")!=EOF){



}   目的，除非系统发出EOF指令，否则一直接收信息


输出格式
要求空行时：补一条printf("\n");打空行提高运行效率


数据溢出：int * int 的结果会先储存到int里面




goto out






out:                传送门（跳脱循环）




输出要集成，使用循环输出




数据范围
-2^n-1到(2^n-1)-1
n是数据字节数


unsigned表达纯2二进制
正数范围扩大一倍



浮点有精度误差
用fabs（f1-f2）<1e-8
绝对值误差小于一的负八次方



！非
&&与
||或



64位架构地址占8字节
32位架构地址占4字节
int一直是4字节



函数的参数并不进入函数内部运算，而是将值赋给函数内的参数进行运算















&运算符：取变量地址（对象是变量）
变量从上到下分配，先定义的变量地址大
数组a
a=&a=a[0]
&a的结果是16进制整数的a的地址
*运算：访问变量


定义一个指针变量：类型说明符*变量名
eg：int*p=&a（p是变量a的指针）
p是指针变量

*号除了定义指针（作为左值
也能做运算符，表示访问指针变量所指的地址（对象是地址）
*p=k含义：从左到右，先访问p所指的地址，将k
的值赋给p所指的变量
int k =*p含义：有一个整数k，访问p所指的地址
将处在那个地址的变量的值赋给k




int* p,q
int *p,q
p是指针，q不是



  数组在输入函数时输入的是自己的地址,可以直接在函数里面
对数组进行修改（实际上是访问）
eg：void minmax（int a[]){

     a此时是指针

}
因此定义函数的时候也可以这样写
 void minmax（int *a）{





 }
 数组是一种const指针（常量）
 int a[] 本质是 int const *a
 *p=a （代表p访问了a数组的第一个单元）



 int const *p 说明p指向不能变
const int*p   说明不能通过p改变指向的变量的值（写入）


const在*前面表示指针锁定了指向的地址
const在*后面表示指针不能写入
（用于将大数据以地址的形式进行传递，类似于数组）


假设p是指针
int *p +1
char *p +1
两者结果不同，指针加一意思是地址前进一个单元，
一个int单元是4bit
而char单元是1bit
所以二者结果不同

eg：*p（指向a[0])
则*（p+1）指向a[1]

两个指针相减，
计算结果是两个指针地址之间所间隔的单元数



字符串定义：
char *s="hello"
s是指针,指针被赋予字符串时会将字符串存储在代码段
因此s所指的地方位于程序代码段，而且是只读的
不能被修改
作为参数或者动态分配空间时使用





char s []="hello\0"
s是字符串数组，可以被修改，字符串储存在本地变量

%s可以用于输入输出字符串
%Ns代表最多接受N个字符
eg%7s：最多读七个
scanf检测字符串输入的时候
读到空格tab回车就会停止


二维字符串数组：
char [a][b]
a代表有多少组字符
b代表有一个字符串的长度


ascii码转化基础
48：0
65：A
大小写相差32
97：a
122 z
123
结构定义：
struct 结构类型 {
     成员类型 成员名称
}

后续调用：
struct 结构类型 结构名称；

函数内定义变量与全局变量重名时会优先使用函数内变量
未定义时使用全局变量
静态本地变量static前缀：在函数调用结束后保留变量，
延长其生存期，本质上还是全局变量，但是作用域还是本地变量
（只能在函数内被访问）

本地变量的指针在变量生存期外时指向的不一定是那个变量，
会指向另外一个占用了那个地址的变量
预定义的宏：
__func__当前的函数名；
参数宏：
cube（x) (x*x)
例子：cube(6) 会被替换为 （6*6）
完全的文本替换

可变数组：




链表；
struct 链表类型 链表名称{
     成员类型 成员名称
     struct 链表类型 *链表名
}
eg：struct node{
     int value
     struct node *next//定义了一种指针指向这个结构
}


位运算：
int 32位整数 第一位符号位 31个储存数据（原码形式）
计算机会用补码储存，先将原码转化为补码再进行储存
正数补码=原码，负数补码=符号位不变，后面全部取反再加1

与:a&b 将a与b化为二进制数，每一位分别进行计算，都为1则结果为1，否则为0 ：1&0=0
或：a|b 将a与b化为二进制数，每一位分别进行计算，有1则结果为1，没有则为0：1|0=1
异或：a|b 将a与b化为二进制数，每一位分别进行计算，不同结果为1，相同则为0：1^1=0 1^0=1

取反: ~ a 将a按位取反。1变0，0变1 （对补码进行操作，再转化为原码,计算机内部直接储存补码）
eg：5的带符号二进制（8bit）=00000101（补码）取反后：11111010（补码）→减一再除符号位取反 10000110（原码）=-6
无符号则直接用原码储存（都是正数）


左移：a<<b 将a左移b位（在a的二进制数后加b个0）结果相当于a*2的b次方（十进制）
右移：a>>b 将a右移b位（去掉a末尾的b位，然后补b个0，110001>>2=001100)结果相当于a/2的b次方（十进制）
不要对负数进行左移和右移

内联函数：用关键词inline写在函数开头，所有调用函数的位置直接进行文本替换
减去调用函数的时间，但是会导致代码量增大，短代码用会大幅提高时间性能